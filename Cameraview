<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Camera Viewer</title>
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            flex-direction: column;
        }

        .container {
            text-align: center;
            position: relative;
        }

        h1 {
            color: white;
            font-size: 2rem;
            margin-bottom: 20px;
            display: inline-flex;
            align-items: center;
        }

        h1 button {
            background: transparent;
            border: none;
            font-size: 1.5rem;
            margin-left: 10px;
            cursor: pointer;
            color: white;
        }

        h1 button:hover {
            transform: scale(1.1);
        }

        .camera-box {
            width: 500px;
            height: 300px;
            border-radius: 15px;
            border: 4px solid rgba(255, 255, 255, 0.8);
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
            overflow: hidden;
            background: black;
            position: relative;
        }

        video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .settings {
            position: absolute;
            top: 10%;
            left: 50%;
            transform: translate(-50%, -10%);
            width: 300px;
            padding: 20px;
            border-radius: 10px;
            background: linear-gradient(135deg, #00c6ff, #0072ff);
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
            display: none;
            z-index: 10;
        }

        .settings label {
            display: block;
            margin: 10px 0 5px;
            color: white;
        }

        .settings input, .settings select {
            width: 100%;
            margin-bottom: 15px;
        }

        .settings button {
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 5px;
            background-color: white;
            cursor: pointer;
        }

        .settings button:hover {
            background-color: lightgray;
        }

        .capture-button {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 1rem;
            border: none;
            border-radius: 5px;
            background-color: #0072ff;
            color: white;
            cursor: pointer;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        }

        .capture-button:hover {
            background-color: #005bb5;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>
            <span id="title">Viewer</span>
            <button id="settings-button">‚öôÔ∏è</button>
        </h1>

        <div class="camera-box">
            <video id="camera" autoplay playsinline></video>
        </div>

        <button class="capture-button" id="capture-button">üì∏ Take Photo</button>
        <button class="capture-button" id="record-button">üé• Start Recording</button>

        <div class="settings" id="settings">
            <label for="language-select" id="language-label">Language:</label>
            <select id="language-select">
                <option value="en">English</option>
                <option value="pt">Portugu√™s</option>
            </select>

            <label for="brightness" id="brightness-label">Brightness:</label>
            <input type="range" id="brightness" min="0" max="100" value="50">

            <label for="zoom" id="zoom-label">Zoom:</label>
            <input type="range" id="zoom" min="1" max="5" step="0.1" value="1">

            <label for="camera-select" id="camera-select-label">Select Camera:</label>
            <select id="camera-select"></select>

            <label for="timer" id="timer-label">Photo Timer:</label>
            <select id="timer">
                <option value="0">0 seconds</option>
                <option value="3">3 seconds</option>
                <option value="5">5 seconds</option>
                <option value="10">10 seconds</option>
                <option value="20">20 seconds</option>
                <option value="60">1 minute</option>
            </select>

            <button id="close-settings">Close Settings</button>
        </div>
    </div>

    <script>
        const settingsButton = document.getElementById('settings-button');
        const settings = document.getElementById('settings');
        const closeSettingsButton = document.getElementById('close-settings');
        const camera = document.getElementById('camera');
        const cameraSelect = document.getElementById('camera-select');
        const captureButton = document.getElementById('capture-button');
        const recordButton = document.getElementById('record-button');
        const timerSelect = document.getElementById('timer');
        const languageSelect = document.getElementById('language-select');

        let mediaRecorder;
        let recordedChunks = [];

        const translations = {
            en: {
                title: "Camera Viewer",
                brightness: "Brightness:",
                zoom: "Zoom:",
                selectCamera: "Select Camera:",
                photoTimer: "Photo Timer:",
                closeSettings: "Close Settings",
                takePhoto: "üì∏ Take Photo",
                startRecording: "üé• Start Recording",
                stopRecording: "‚èπÔ∏è Stop Recording",
                language: "Language:",
                confirmDownload: "Do you want to download this file?"
            },
            pt: {
                title: "Visualizador de C√¢mera",
                brightness: "Brilho:",
                zoom: "Zoom:",
                selectCamera: "Selecionar C√¢mera:",
                photoTimer: "Temporizador de Foto:",
                closeSettings: "Fechar Configura√ß√µes",
                takePhoto: "üì∏ Tirar Foto",
                startRecording: "üé• Iniciar Grava√ß√£o",
                stopRecording: "‚èπÔ∏è Parar Grava√ß√£o",
                language: "Idioma:",
                confirmDownload: "Voc√™ deseja baixar este arquivo?"
            }
        };

        // Language change function
        languageSelect.addEventListener('change', () => {
            const selectedLanguage = languageSelect.value;
            const texts = translations[selectedLanguage];

            document.getElementById('title').textContent = texts.title;
            document.getElementById('brightness-label').textContent = texts.brightness;
            document.getElementById('zoom-label').textContent = texts.zoom;
            document.getElementById('camera-select-label').textContent = texts.selectCamera;
            document.getElementById('timer-label').textContent = texts.photoTimer;
            closeSettingsButton.textContent = texts.closeSettings;
            captureButton.textContent = texts.takePhoto;
            recordButton.textContent = texts.startRecording;
            document.getElementById('language-label').textContent = texts.language;
        });

        // Initialize language to English
        languageSelect.value = 'en';
        languageSelect.dispatchEvent(new Event('change'));

        // Toggle settings visibility
        settingsButton.addEventListener('click', () => {
            settings.style.display = settings.style.display === 'block' ? 'none' : 'block';
        });

        closeSettingsButton.addEventListener('click', () => {
            settings.style.display = 'none';
        });

        // Access the camera
        async function initCamera() {
            const devices = await navigator.mediaDevices.enumerateDevices();
            const videoDevices = devices.filter(device => device.kind === 'videoinput');

            videoDevices.forEach((device, index) => {
                const option = document.createElement('option');
                option.value = device.deviceId;
                option.text = device.label || `Camera ${index + 1}`;
                cameraSelect.appendChild(option);
            });

            if (videoDevices.length > 0) {
                startCamera(videoDevices[0].deviceId);
            }
        }

        async function startCamera(deviceId) {
            const stream = await navigator.mediaDevices.getUserMedia({
                video: {
                    deviceId: { exact: deviceId },
                    width: { ideal: 1920 },
                    height: { ideal: 1080 }
                }
            });

            camera.srcObject = stream;
        }

        cameraSelect.addEventListener('change', () => {
            startCamera(cameraSelect.value);
        });

        initCamera();

        // Brightness and Zoom (Simulated, real implementation depends on camera capabilities)
        document.getElementById('brightness').addEventListener('input', (e) => {
            camera.style.filter = `brightness(${e.target.value}%)`;
        });

        document.getElementById('zoom').addEventListener('input', (e) => {
            camera.style.transform = `scale(${e.target.value})`;
        });

        // Capture photo
        captureButton.addEventListener('click', async () => {
            const timerValue = parseInt(timerSelect.value, 10);

            setTimeout(() => {
                const canvas = document.createElement('canvas');
                const context = canvas.getContext('2d');
                canvas.width = camera.videoWidth;
                canvas.height = camera.videoHeight;
                context.drawImage(camera, 0, 0, canvas.width, canvas.height);

                const confirmDownload = confirm(translations[languageSelect.value].confirmDownload);

                if (confirmDownload) {
                    const link = document.createElement('a');
                    link.href = canvas.toDataURL('image/png');
                    link.download = 'photo.png';
                    link.click();
                }
            }, timerValue * 1000);
        });

        // Record video
        recordButton.addEventListener('click', () => {
            if (!mediaRecorder || mediaRecorder.state === 'inactive') {
                const stream = camera.srcObject;
                mediaRecorder = new MediaRecorder(stream, { mimeType: 'video/webm' });

                mediaRecorder.ondataavailable = (e) => {
                    if (e.data.size > 0) {
                        recordedChunks.push(e.data);
                    }
                };

                mediaRecorder.onstop = () => {
                    const blob = new Blob(recordedChunks, { type: 'video/webm' });
                    const url = URL.createObjectURL(blob);

                    const confirmDownload = confirm(translations[languageSelect.value].confirmDownload);

                    if (confirmDownload) {
                        const link = document.createElement('a');
                        link.href = url;
                        link.download = 'video.webm';
                        link.click();
                    }

                    recordedChunks = [];
                };

                mediaRecorder.start();
                recordButton.textContent = translations[languageSelect.value].stopRecording;
            } else {
                mediaRecorder.stop();
                recordButton.textContent = translations[languageSelect.value].startRecording;
            }
        });
    </script>
</body>
</html>
