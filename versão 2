<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced Camera Viewer</title>
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            flex-direction: column;
        }

        .container {
            text-align: center;
            position: relative;
        }

        h1 {
            color: white;
            font-size: 2rem;
            margin-bottom: 20px;
            display: inline-flex;
            align-items: center;
        }

        h1 button {
            background: transparent;
            border: none;
            font-size: 1.5rem;
            margin-left: 10px;
            cursor: pointer;
            color: white;
        }

        h1 button:hover {
            transform: scale(1.1);
        }

        .camera-box {
            width: 500px;
            height: 300px;
            border-radius: 15px;
            border: 4px solid rgba(255, 255, 255, 0.8);
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
            overflow: hidden;
            background: black;
            position: relative;
        }

        video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transform: scaleX(-1);
        }

        .settings {
            position: absolute;
            top: 10%;
            left: 50%;
            transform: translate(-50%, -10%);
            width: 300px;
            padding: 20px;
            border-radius: 10px;
            background: linear-gradient(135deg, #00c6ff, #0072ff);
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
            display: none;
            z-index: 10;
        }

        .settings label {
            display: block;
            margin: 10px 0 5px;
            color: white;
        }

        .settings input, .settings select {
            width: 100%;
            margin-bottom: 15px;
        }

        .settings button {
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 5px;
            background-color: white;
            cursor: pointer;
        }

        .settings button:hover {
            background-color: lightgray;
        }

        .capture-button {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 1rem;
            border: none;
            border-radius: 5px;
            background-color: #0072ff;
            color: white;
            cursor: pointer;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        }

        .capture-button:hover {
            background-color: #005bb5;
        }

    </style>
</head>
<body>
    <div class="container">
        <h1>
            <span id="title">Enhanced Camera Viewer</span>
            <button id="settings-button">‚öôÔ∏è</button>
        </h1>

        <div class="camera-box">
            <video id="camera" autoplay playsinline></video>
        </div>

        <button class="capture-button" id="capture-button">üì∏ Take Photo</button>
        <button class="capture-button" id="record-button">üé• Start Recording</button>

        <div class="settings" id="settings">
            <label for="brightness">Brightness:</label>
            <input type="range" id="brightness" min="0" max="200" value="100">

            <label for="contrast">Contrast:</label>
            <input type="range" id="contrast" min="0" max="200" value="100">

            <label for="zoom">Zoom:</label>
            <input type="range" id="zoom" min="1" max="3" step="0.1" value="1">

            <button id="close-settings">Close Settings</button>
        </div>
    </div>

    <script>
        const settingsButton = document.getElementById('settings-button');
        const settings = document.getElementById('settings');
        const closeSettingsButton = document.getElementById('close-settings');
        const camera = document.getElementById('camera');
        const captureButton = document.getElementById('capture-button');
        const recordButton = document.getElementById('record-button');

        let mediaRecorder;
        let recordedChunks = [];

        // Toggle settings visibility
        settingsButton.addEventListener('click', () => {
            settings.style.display = settings.style.display === 'block' ? 'none' : 'block';
        });

        closeSettingsButton.addEventListener('click', () => {
            settings.style.display = 'none';
        });

        // Access the camera
        async function initCamera() {
            const stream = await navigator.mediaDevices.getUserMedia({
                video: {
                    width: { ideal: 1920 },
                    height: { ideal: 1080 }
                },
                audio: {
                    noiseSuppression: true,
                    echoCancellation: true
                }
            });

            camera.srcObject = stream;
        }

        initCamera();

        // Brightness and Contrast
        document.getElementById('brightness').addEventListener('input', (e) => {
            const brightness = e.target.value;
            const contrast = document.getElementById('contrast').value;
            camera.style.filter = `brightness(${brightness}%) contrast(${contrast}%)`;
        });

        document.getElementById('contrast').addEventListener('input', (e) => {
            const contrast = e.target.value;
            const brightness = document.getElementById('brightness').value;
            camera.style.filter = `brightness(${brightness}%) contrast(${contrast}%)`;
        });

        // Zoom
        document.getElementById('zoom').addEventListener('input', (e) => {
            camera.style.transform = `scale(${e.target.value})`;
        });

        // Capture photo
        captureButton.addEventListener('click', () => {
            const canvas = document.createElement('canvas');
            const context = canvas.getContext('2d');
            canvas.width = camera.videoWidth;
            canvas.height = camera.videoHeight;
            context.drawImage(camera, 0, 0, canvas.width, canvas.height);

            const link = document.createElement('a');
            link.href = canvas.toDataURL('image/png');
            link.download = 'photo.png';
            link.click();
        });

        // Record video
        recordButton.addEventListener('click', () => {
            if (!mediaRecorder || mediaRecorder.state === 'inactive') {
                const stream = camera.srcObject;
                mediaRecorder = new MediaRecorder(stream, { mimeType: 'video/webm' });

                mediaRecorder.ondataavailable = (e) => {
                    if (e.data.size > 0) {
                        recordedChunks.push(e.data);
                    }
                };

                mediaRecorder.onstop = () => {
                    const blob = new Blob(recordedChunks, { type: 'video/webm' });
                    const url = URL.createObjectURL(blob);

                    const link = document.createElement('a');
                    link.href = url;
                    link.download = 'video.webm';
                    link.click();

                    recordedChunks = [];
                };

                mediaRecorder.start();
                recordButton.textContent = '‚èπÔ∏è Stop Recording';
            } else {
                mediaRecorder.stop();
                recordButton.textContent = 'üé• Start Recording';
            }
        });
    </script>
</body>
</html>
